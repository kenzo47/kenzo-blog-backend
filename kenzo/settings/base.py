"""
Django settings for kenzo project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

import environ

ENV = environ.Env()

DEBUG = ENV("DEBUG")

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/


# Application definition

CUSTOM_APPS = [
    "wagtail_localize",
    "wagtail_localize.locales",
    "wagtailseo",
    "wagtail_headless_preview",
    "storages",
    "wagtailautocomplete",
]

INSTALLED_APPS = [
    "base",
    "base.custom_user",
    "home",
    "blog",
    "search",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "wagtail.contrib.settings",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",
    "corsheaders",
    # "django.contrib.sitemaps",
    # "robots",
    *CUSTOM_APPS,
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Whitenoise
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "kenzo/templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "wagtail.contrib.settings.context_processors.settings",
            ],
        },
    },
]

WSGI_APPLICATION = "kenzo.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": ENV("DATABASE_NAME"),
        "USER": ENV("DATABASE_USER"),
        "PASSWORD": ENV("DATABASE_PASS"),
        "HOST": ENV("DATABASE_HOST"),  # Set to empty string for localhost.
        "PORT": ENV("DATABASE_PORT"),  # Set to empty string for default.
        "CONN_MAX_AGE": 600,  # number of seconds database connections should persist for
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True
WAGTAIL_I18N_ENABLED = True
WAGTAIL_LOCALIZE_DEFAULT_TRANSLATION_MODE = "simple"

WAGTAIL_CONTENT_LANGUAGES = [("en", "English"), ("nl", "Dutch")]

WAGTAILLOCALIZE_MACHINE_TRANSLATOR = {
    "CLASS": "wagtail_localize.machine_translators.deepl.DeepLTranslator",
    "OPTIONS": {
        "AUTH_KEY": os.environ.get("DEEPL_AUTH", None),
    },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
    # Add static files from webpack/frontend
]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# JavaScript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/4.1/ref/contrib/staticfiles/#manifeststaticfilesstorage

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# AWS S3 settings
# If an AWS Access key is filled in, enable S3.
if (
    ENV("AWS_ACCESS_KEY_ID")
    and ENV("AWS_SECRET_ACCESS_KEY")
    and ENV("AWS_STORAGE_BUCKET_NAME")
    and ENV("AWS_S3_ENDPOINT_URL")
    and ENV("AWS_S3_PUBLIC_STORAGE_BASE")
    and ENV("AWS_S3_PRIVATE_STORAGE_BASE")
):
    # Amazon S3 (DigitalOcean Spaces, ...)
    AWS_ACCESS_KEY_ID = ENV("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = ENV("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = ENV("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_ENDPOINT_URL = ENV("AWS_S3_ENDPOINT_URL")
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    # Public file storage
    AWS_DEFAULT_ACL = "public-read"
    AWS_LOCATION = ENV("AWS_S3_PUBLIC_STORAGE_BASE")
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    S3_BASE_URL = "%s/%s" % (AWS_S3_ENDPOINT_URL, AWS_LOCATION)
    # Private file storage.
    AWS_PRIVATE_LOCATION = ENV("AWS_S3_PRIVATE_STORAGE_BASE")
    AWS_PRIVATE_FILE_STORAGE = "base.storage_backends.PrivateMediaStorage"  # Custom storage class for private files.

    AWS_S3_FILE_OVERWRITE = False  # Allow for autorenaming files with the same filename.

    AWS_QUERYSTRING_AUTH = False  # Don't sign all files in Boto3.


# Wagtail settings
SITE_ID = 1
WAGTAIL_SITE_NAME = ENV("WAGTAIL_SITE_NAME")
ROOT_URLCONF = f"{ENV('SITE_MODULE_NAME')}.urls"
BASE_URL = ENV("BASE_URL")
FRONTEND_URL = ENV("FRONTEND_URL")
SECRET_KEY = ENV("SECRET_KEY")
ALLOWED_HOSTS = ENV("ALLOWED_HOSTS").split()
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS settings
CORS_ALLOWED_ORIGINS = ENV("CORS_ALLOWED_ORIGINS").split()

# REST framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}


# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
WAGTAILADMIN_BASE_URL = "https://kenzo47.dev"


# Custom user model for email authentication
AUTH_USER_MODEL = "custom_user.User"


WAGTAIL_HEADLESS_PREVIEW = {
    "CLIENT_URLS": {"default": f"{FRONTEND_URL}/api/preview/"},
    "SERVE_BASE_URL": FRONTEND_URL,
    "REDIRECT_ON_PREVIEW": True,
}
